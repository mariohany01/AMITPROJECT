
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec5  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d7  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b4  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007e61  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b8  00000000  00000000  0000aff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000b8b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000008a5  00000000  00000000  0000b981  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	43 c0       	rjmp	.+134    	; 0x8c <__vector_1>
   6:	00 00       	nop
   8:	68 c0       	rjmp	.+208    	; 0xda <__vector_2>
   a:	00 00       	nop
   c:	8d c0       	rjmp	.+282    	; 0x128 <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	51 c1       	rjmp	.+674    	; 0x2cc <__vector_10>
  2a:	00 00       	nop
  2c:	28 c1       	rjmp	.+592    	; 0x27e <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	f7 d0       	rcall	.+494    	; 0x276 <main>
  88:	48 c1       	rjmp	.+656    	; 0x31a <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <__vector_1>:
}
void SET_CallBack_INT2 (void (*p2func)(void)){
	p2f2 = p2func;
}
/////////////////////////////////////////////////
ISR(INT0_vect){
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	2f 93       	push	r18
  98:	3f 93       	push	r19
  9a:	4f 93       	push	r20
  9c:	5f 93       	push	r21
  9e:	6f 93       	push	r22
  a0:	7f 93       	push	r23
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	af 93       	push	r26
  a8:	bf 93       	push	r27
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
	p2f0();	
  ae:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b6:	09 95       	icall
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	bf 91       	pop	r27
  be:	af 91       	pop	r26
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	7f 91       	pop	r23
  c6:	6f 91       	pop	r22
  c8:	5f 91       	pop	r21
  ca:	4f 91       	pop	r20
  cc:	3f 91       	pop	r19
  ce:	2f 91       	pop	r18
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_2>:
ISR(INT1_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
    p2f1();
  fc:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <p2f1>
 100:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <p2f1+0x1>
 104:	09 95       	icall
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_3>:
ISR(INT2_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
    p2f2();
 14a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <p2f2>
 14e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <p2f2+0x1>
 152:	09 95       	icall
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <LCD_char>:
	_delay_ms(100);
	
	_delay_ms(5);
	//////////////////////////////////////////////
	#elif LCD_MODE == 4 
	SET_BiT(DIO_PORTB,LCD_RS);
 176:	c1 9a       	sbi	0x18, 1	; 24
	CLR_Bit(DIO_PORTB,LCD_RW);
 178:	c2 98       	cbi	0x18, 2	; 24
	
	DIO_PORTA = (data & 0xF0) | (DIO_PORTA & 0x0F);
 17a:	9b b3       	in	r25, 0x1b	; 27
 17c:	28 2f       	mov	r18, r24
 17e:	20 7f       	andi	r18, 0xF0	; 240
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	92 2b       	or	r25, r18
 184:	9b bb       	out	0x1b, r25	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 186:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	e3 ec       	ldi	r30, 0xC3	; 195
 18a:	f9 e0       	ldi	r31, 0x09	; 9
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_char+0x16>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_char+0x1c>
 192:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 194:	c3 98       	cbi	0x18, 3	; 24
 196:	e7 ea       	ldi	r30, 0xA7	; 167
 198:	f1 e6       	ldi	r31, 0x61	; 97
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_char+0x24>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_char+0x2a>
 1a0:	00 00       	nop
	_delay_ms(100);
	
	DIO_PORTA = (data << 4) | (DIO_PORTA & 0x0F);
 1a2:	2b b3       	in	r18, 0x1b	; 27
 1a4:	f0 e1       	ldi	r31, 0x10	; 16
 1a6:	8f 02       	muls	r24, r31
 1a8:	c0 01       	movw	r24, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	92 2f       	mov	r25, r18
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	89 2b       	or	r24, r25
 1b2:	8b bb       	out	0x1b, r24	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 1b4:	c3 9a       	sbi	0x18, 3	; 24
 1b6:	83 ec       	ldi	r24, 0xC3	; 195
 1b8:	99 e0       	ldi	r25, 0x09	; 9
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_char+0x44>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_char+0x4a>
 1c0:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 1c2:	c3 98       	cbi	0x18, 3	; 24
 1c4:	e7 ea       	ldi	r30, 0xA7	; 167
 1c6:	f1 e6       	ldi	r31, 0x61	; 97
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_char+0x52>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_char+0x58>
 1ce:	00 00       	nop
 1d0:	81 ee       	ldi	r24, 0xE1	; 225
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_char+0x5e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_char+0x64>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <LCD_command>:
	_delay_ms(100);
	
	_delay_ms(5);
	//////////////////////////////////////////////
	#elif LCD_MODE == 4
	CLR_Bit(DIO_PORTB,LCD_RS);
 1de:	c1 98       	cbi	0x18, 1	; 24
	CLR_Bit(DIO_PORTB,LCD_RW);
 1e0:	c2 98       	cbi	0x18, 2	; 24
	
	DIO_PORTA = (cmd & 0xF0) | (DIO_PORTA & 0x0F);
 1e2:	9b b3       	in	r25, 0x1b	; 27
 1e4:	28 2f       	mov	r18, r24
 1e6:	20 7f       	andi	r18, 0xF0	; 240
 1e8:	9f 70       	andi	r25, 0x0F	; 15
 1ea:	92 2b       	or	r25, r18
 1ec:	9b bb       	out	0x1b, r25	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 1ee:	c3 9a       	sbi	0x18, 3	; 24
 1f0:	e3 ec       	ldi	r30, 0xC3	; 195
 1f2:	f9 e0       	ldi	r31, 0x09	; 9
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_command+0x16>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_command+0x1c>
 1fa:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 1fc:	c3 98       	cbi	0x18, 3	; 24
 1fe:	e7 ea       	ldi	r30, 0xA7	; 167
 200:	f1 e6       	ldi	r31, 0x61	; 97
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_command+0x24>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_command+0x2a>
 208:	00 00       	nop
	_delay_ms(100);
	
	DIO_PORTA = (cmd << 4) | (DIO_PORTA & 0x0F);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	f0 e1       	ldi	r31, 0x10	; 16
 20e:	8f 02       	muls	r24, r31
 210:	c0 01       	movw	r24, r0
 212:	11 24       	eor	r1, r1
 214:	92 2f       	mov	r25, r18
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	89 2b       	or	r24, r25
 21a:	8b bb       	out	0x1b, r24	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 21c:	c3 9a       	sbi	0x18, 3	; 24
 21e:	83 ec       	ldi	r24, 0xC3	; 195
 220:	99 e0       	ldi	r25, 0x09	; 9
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_command+0x44>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_command+0x4a>
 228:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 22a:	c3 98       	cbi	0x18, 3	; 24
 22c:	e7 ea       	ldi	r30, 0xA7	; 167
 22e:	f1 e6       	ldi	r31, 0x61	; 97
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_command+0x52>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_command+0x58>
 236:	00 00       	nop
 238:	81 ee       	ldi	r24, 0xE1	; 225
 23a:	94 e0       	ldi	r25, 0x04	; 4
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_command+0x5e>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_command+0x64>
 242:	00 00       	nop
 244:	08 95       	ret

00000246 <LCD_init>:
		 LCD_command(0x01);
		 LCD_command(0x06);
		 LCD_command(0x02);
//////////////////////////////////////////////////////	 
	#elif LCD_MODE == 4
	    SET_BiT(DIO_DDRB,LCD_RW);
 246:	ba 9a       	sbi	0x17, 2	; 23
		SET_BiT(DIO_DDRB,LCD_RS);
 248:	b9 9a       	sbi	0x17, 1	; 23
	    SET_BiT(DIO_DDRB,LCD_EN);
 24a:	bb 9a       	sbi	0x17, 3	; 23
 24c:	87 ea       	ldi	r24, 0xA7	; 167
 24e:	91 e6       	ldi	r25, 0x61	; 97
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_init+0xa>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_init+0x10>
 256:	00 00       	nop
		//SET_BiT(DIO_DDRA,LCD_A5);
		//SET_BiT(DIO_DDRA,LCD_A6);
	    //SET_BiT(DIO_DDRA,LCD_A7);
		
		_delay_ms(100);
		 LCD_command(0x33);
 258:	83 e3       	ldi	r24, 0x33	; 51
 25a:	c1 df       	rcall	.-126    	; 0x1de <LCD_command>
		 LCD_command(0x32);
 25c:	82 e3       	ldi	r24, 0x32	; 50
 25e:	bf df       	rcall	.-130    	; 0x1de <LCD_command>
		 LCD_command(0x28);
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	bd df       	rcall	.-134    	; 0x1de <LCD_command>
		 
		 LCD_command(0x0C);
 264:	8c e0       	ldi	r24, 0x0C	; 12
 266:	bb df       	rcall	.-138    	; 0x1de <LCD_command>
		 LCD_command(0x01);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	b9 df       	rcall	.-142    	; 0x1de <LCD_command>
		 LCD_command(0x06);
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	b7 df       	rcall	.-146    	; 0x1de <LCD_command>
 270:	82 e0       	ldi	r24, 0x02	; 2
		 LCD_command(0x02);
 272:	b5 cf       	rjmp	.-150    	; 0x1de <LCD_command>
 274:	08 95       	ret

00000276 <main>:
 276:	e7 df       	rcall	.-50     	; 0x246 <LCD_init>
 278:	83 e4       	ldi	r24, 0x43	; 67
	//timer_OCR(255);
	//DIREC();
	//UART_Init();
	LCD_init();
	//LCD_String('helo');
	LCD_char('C');	
 27a:	7d df       	rcall	.-262    	; 0x176 <LCD_char>
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0x6>

0000027e <__vector_11>:
}
void timer_OCR(TU08 ocr_val){
	TIM_OCR0 = ocr_val;
}

ISR(TIMER0_OVF_vect){
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	p2f();
 2a0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <p2f>
 2a4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <p2f+0x1>
 2a8:	09 95       	icall
	
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_10>:
ISR(TIMER0_COMP_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	p3f();
 2ee:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <p3f>
 2f2:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <p3f+0x1>
 2f6:	09 95       	icall
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
